{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "artifactsBaseUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/arsenvlad/snappydata-azure/master",
      "metadata": {
        "description": "Base URL for artifacts such as nested templates and scripts",
        "artifactsBaseUrl": ""
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "westus",
      "metadata": {
        "description": "Location for the deployment"
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "av",
      "minLength": "3",
      "maxLength": "10",
      "metadata": {
        "description": "Cluster name consisting of 3-10 lowercase letter and numbers"
      }
    },
    "dnsNamePrefix": {
      "type": "string",
      "defaultValue": "avsnappydata1",
      "metadata": {
        "description": "Globally unique DNS name"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Username for administrator"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication type for the virtual machines"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for administrator"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH public key that will be included on all nodes in the cluster. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
      }
    },
    "locatorVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "VM size"
      }
    },
    "leaderVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "VM size"
      }
    },
    "dataStoreVmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_DS11_v2",
        "Standard_DS12_v2",
        "Standard_DS13_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "metadata": {
        "description": "VM size"
      }
    },
    "dataStoreNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "allowedValues": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
      "metadata": {
        "description": "The number of virtual machines instances to provision for the data store nodes"
      }
    },
    "allowedIPAddressPrefix": {
      "type": "string",
      "defaultValue": "0.0.0.0/0",
      "metadata": {
        "description": "The IP address range that can be used to SSH to the instances"
      }
    }
  },
  "variables": {
    "apiVersions": {
      "resources": {
        "deployments": "2016-02-01"
      },
      "storage": {
        "storageAccounts": "2016-01-01"
      },
      "network": {
        "virtualNetworks": "2016-03-30",
        "networkInterfaces": "2016-03-30",
        "loadBalancers": "2016-03-30",
        "publicIPAddresses": "2016-03-30",
        "networkSecurityGroups": "2016-03-30"
      },
      "compute": {
        "availabilitySets": "2016-03-30",
        "virtualMachines": "2016-03-30",
        "virtualMachineExtensions": "2016-03-30"
      }
    },
    "baseUrl": "[concat(parameters('artifactsBaseUrl'),'/')]",
    "templateUrlStartSnappyData": "[concat(variables('baseUrl'),'startSnappyData.json')]",
    "scriptUrlInit": "[concat(variables('baseUrl'),'init.sh')]",
    "scriptUrlStartSnappyData": "[concat(variables('baseUrl'),'start_snappydata.sh')]",
    "virtualNetworkName": "[concat(parameters('clusterName'),'-vnet')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetData": "subnet-data",
    "subnetDataIPAddressPrefix": "10.0.1.0/24",
    "subnetDataStartAddress": "10.0.1.4",
    "subnetDataIPAddressParts": "[split(variables('subnetDataStartAddress'),'.')]",
    "subnetApp": "subnet-app",
    "subnetAppIPAddressPrefix": "10.0.2.0/24",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetDataID": "[concat(variables('vnetID'),'/subnets/',variables('subnetData'))]",
    "subnetAppID": "[concat(variables('vnetID'),'/subnets/',variables('subnetApp'))]",
    "nsgApp": "[concat(parameters('clusterName'),'-nsg-app')]",
    "nsgData": "[concat(parameters('clusterName'),'-nsg-data')]",
    "diagnosticsStorageAccount": "[concat('d',uniqueString(resourceGroup().id,'d'),parameters('clusterName'))]",
    "locator1PublicIPName": "[concat(parameters('clusterName'),'-locator1-publicip')]",
    "dnsNameForLocator1PublicIP": "[concat(uniqueString(resourceGroup().id,'l1'),parameters('clusterName'),'1')]",
    "dnsNameForLocator2PublicIP": "[concat(uniqueString(resourceGroup().id,'l1'),parameters('clusterName'),'2')]",
    "locator2PublicIPName": "[concat(parameters('clusterName'),'-locator2-publicip')]",
    "locatorAvailabilitySetSettings": {
      "name": "[concat(parameters('clusterName'),'-as-locator')]",
      "faultDomainCount": "2",
      "updateDomainCount": "5"
    },
    "leaderAvailabilitySetSettings": {
      "name": "[concat(parameters('clusterName'),'-as-leader')]",
      "faultDomainCount": "2",
      "updateDomainCount": "5"
    },
    "dataStoreAvailabilitySetSettings": {
      "name": "[concat(parameters('clusterName'),'-as-datastore')]",
      "faultDomainCount": "3",
      "updateDomainCount": "20"
    },
    "sharedStorageAccount": "[concat('s',uniqueString(resourceGroup().id,'s'),parameters('clusterName'))]",
    "sharedStoreAccountType": "Standard_LRS",
    "locator1NicName": "[concat(parameters('clusterName'),'-locator1-nic')]",
    "locator1PrivateIPAddress": "10.0.1.4",
    "locator1VmName": "[concat(parameters('clusterName'),'-locator2')]",
    "locator2NicName": "[concat(parameters('clusterName'),'-locator2-nic')]",
    "locator2PrivateIPAddress": "10.0.1.5",
    "locator2VmName": "[concat(parameters('clusterName'),'-leader1')]",
    "leader1NicName": "[concat(parameters('clusterName'),'-leader1-nic')]",
    "leader1PrivateIPAddress": "10.0.1.6",
    "leader1VmName": "[concat(parameters('clusterName'),'-leader2')]",
    "leader2NicName": "[concat(parameters('clusterName'),'-leader2-nic')]",
    "leader2PrivateIPAddress": "10.0.1.7",
    "leader2VmName": "[concat(parameters('clusterName'),'-leader2')]",
    "dataStoreStorageAccountArray": [
      "[concat(uniqueString(resourceGroup().id,'0'),parameters('clusterName'),'0')]",
      "[concat(uniqueString(resourceGroup().id,'1'),parameters('clusterName'),'1')]",
      "[concat(uniqueString(resourceGroup().id,'2'),parameters('clusterName'),'2')]",
      "[concat(uniqueString(resourceGroup().id,'3'),parameters('clusterName'),'3')]",
      "[concat(uniqueString(resourceGroup().id,'4'),parameters('clusterName'),'4')]",
      "[concat(uniqueString(resourceGroup().id,'5'),parameters('clusterName'),'5')]"
    ],
    "dataStoreStorageAccountCount": "[length(variables('dataStoreStorageAccountArray'))]",
    "dataStoreStorageAccountType": "Standard_LRS",
    "dataStoreNicName": "[concat(parameters('clusterName'),'-datastore-nic')]",
    "dataStoreVmName": "[concat(parameters('clusterName'),'-datastore')]",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "linuxConfiguration_sshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "path": "[variables('sshKeyPath')]",
            "keyData": "[parameters('sshPublicKey')]"
          }
        ]
      }
    },
    "linuxConfiguration_password": { },
    "linuxConfiguration": "[variables(concat('linuxConfiguration_',parameters('authenticationType')))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersions').network.publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('locator1PublicIPName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForLocator1PublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.publicIPAddresses]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('locator2PublicIPName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForLocator2PublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').storage.storageAccounts]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagnosticsStorageAccount')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkSecurityGroups]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgData')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('allowedIPAddressPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "spark_rule",
            "properties": {
              "description": "Allow HTTP access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "4040",
              "sourceAddressPrefix": "[parameters('allowedIPAddressPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkSecurityGroups]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgApp')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH access",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('allowedIPAddressPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.virtualNetworks]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgData'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgApp'))]"
      ],
      "tags": {
        "Name": "Pivotal"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetData')]",
            "properties": {
              "addressPrefix": "[variables('subnetDataIPAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgData'))]"
              }
            }
          },
          {
            "name": "[variables('subnetApp')]",
            "properties": {
              "addressPrefix": "[variables('subnetAppIPAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgApp'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiversions').compute.availabilitySets]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('locatorAvailabilitySetSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": "[variables('locatorAvailabilitySetSettings').faultDomainCount]",
        "platformUpdateDomainCount": "[variables('locatorAvailabilitySetSettings').updateDomainCount]"
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.availabilitySets]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('leaderAvailabilitySetSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": "[variables('leaderAvailabilitySetSettings').faultDomainCount]",
        "platformUpdateDomainCount": "[variables('leaderAvailabilitySetSettings').updateDomainCount]"
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.availabilitySets]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('dataStoreAvailabilitySetSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": "[variables('dataStoreAvailabilitySetSettings').faultDomainCount]",
        "platformUpdateDomainCount": "[variables('dataStoreAvailabilitySetSettings').updateDomainCount]"
      }
    },
    {
      "apiVersion": "[variables('apiVersions').storage.storageAccounts]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('sharedStorageAccount')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[variables('sharedStorageAccount')]"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('locator1NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('locator1PublicIPName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('locator1PrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('locator1PublicIPName'))]"
              },
              "subnet": {
                "id": "[variables('subnetDataID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('locator1VmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('locatorAvailabilitySetSettings').name)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('sharedStorageAccount'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('locator1NicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccount'))]"
      ],
      "tags": {
        "Name": "[variables('locator1VmName')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('locatorAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('locatorVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('locator1VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('sharedStorageAccount'), '.blob.core.windows.net/vhds/', variables('locator1VmName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', variables('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('locator1NicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('locator1VmName'), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('locator1VmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "settings": {
          "fileUris": [
            "[variables('scriptUrlInit')]"
          ],
          "commandToExecute": "[concat('sh init.sh', ' -t locator1', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', variables('locator1NicName'))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').resources.deployments]",
      "type": "Microsoft.Resources/deployments",
      "name": "start_snappydata",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('locator1VmName'), '/extensions/init')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('locator1VmName'), '/extensions/init')]",
        "dataStoreExtensionsCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('templateUrlStartSnappyData')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersions": {
            "value": "[variables('apiVersions')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('locator1VmName')]"
          },
          "extensionSettings": {
            "value": {
              "fileUris": [
                "[variables('scriptUrlStartSnappyData')]"
              ],
              "commandToExecute": "[concat('sh start_snappydata.sh', ' -t locator1', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', variables('locator1NicName'))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('locator2NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('locator2PublicIPName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('locator2PrivateIPAddress')]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('locator2PublicIPName'))]"
              },
              "subnet": {
                "id": "[variables('subnetDataID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('locator2VmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('locatorAvailabilitySetSettings').name)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('sharedStorageAccount'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('locator2NicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccount'))]"
      ],
      "tags": {
        "Name": "[variables('locator2VmName')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('locatorAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('locatorVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('locator2VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('sharedStorageAccount'), '.blob.core.windows.net/vhds/', variables('locator2VmName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', variables('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('locator2NicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('locator2VmName'), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('locator2VmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "settings": {
          "fileUris": [
            "[variables('scriptUrlInit')]"
          ],
          "commandToExecute": "[concat('sh init.sh', ' -t locator2', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', variables('locator1NicName'))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('leader1NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('leader1PrivateIPAddress')]",
              "subnet": {
                "id": "[variables('subnetDataID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('leader1VmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('leaderAvailabilitySetSettings').name)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('sharedStorageAccount'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('leader1NicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccount'))]"
      ],
      "tags": {
        "Name": "[variables('leader1VmName')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('leaderAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('leaderVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('leader1VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('sharedStorageAccount'), '.blob.core.windows.net/vhds/', variables('leader1VmName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', variables('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('leader1NicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('leader1VmName'), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('leader1VmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "settings": {
          "fileUris": [
            "[variables('scriptUrlInit')]"
          ],
          "commandToExecute": "[concat('sh init.sh', ' -t leader', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', variables('leader1NicName'))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('leader2NicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('leader2PrivateIPAddress')]",
              "subnet": {
                "id": "[variables('subnetDataID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('leader2VmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('leaderAvailabilitySetSettings').name)]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('sharedStorageAccount'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('leader2NicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccount'))]"
      ],
      "tags": {
        "Name": "[variables('leader2VmName')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('leaderAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('leaderVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('leader2VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "7.2",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('sharedStorageAccount'), '.blob.core.windows.net/vhds/', variables('leader2VmName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', variables('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('leader2NicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('leader2VmName'), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('leader2VmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "settings": {
          "fileUris": [
            "[variables('scriptUrlInit')]"
          ],
          "commandToExecute": "[concat('sh init.sh', ' -t leader', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', variables('leader2NicName'))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').storage.storageAccounts]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('dataStoreStorageAccountArray')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dataStoreStorageAccountsCopy",
        "count": "[length(variables('dataStoreStorageAccountArray'))]"
      },
      "kind": "Storage",
      "sku": {
        "name": "[variables('dataStoreStorageAccountType')]"
      },
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('apiVersions').network.networkInterfaces]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('dataStoreNicName'),copyIndex(1))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "copy": {
        "name": "dataStoreNicsCopy",
        "count": "[parameters('dataStoreNodeCount')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ip1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('subnetDataIPAddressParts')[0],'.',variables('subnetDataIPAddressParts')[1],'.',variables('subnetDataIPAddressParts')[2],'.', string(add(int(variables('subnetDataIPAddressParts')[3]), copyIndex(4))))]",
              "subnet": {
                "id": "[variables('subnetDataID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('dataStoreVmName'),copyIndex(1))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('dataStoreAvailabilitySetSettings').name)]",
        "dataStoreStorageAccountsCopy",
        "[concat('Microsoft.Network/networkInterfaces/', concat(variables('dataStoreNicName'),copyIndex(1)))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccount'))]"
      ],
      "copy": {
        "name": "dataStoreVmsCopy",
        "count": "[parameters('dataStoreNodeCount')]"
      },
      "tags": {
        "Name": "[concat(variables('dataStoreVmName'),copyIndex(1))]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('dataStoreAvailabilitySetSettings').name)]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('dataStoreVmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('dataStoreVmName'),copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku": "6.7",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('dataStoreStorageAccountArray')[mod(copyIndex(),variables('dataStoreStorageAccountCount'))], '.blob.core.windows.net/vhds/', concat(variables('dataStoreVmName'),copyIndex(1)), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', variables('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('dataStoreNicName'),copyIndex(1)))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersions').compute.virtualMachineExtensions]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(concat(variables('dataStoreVmName'),copyIndex(1)), '/init')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "dataStoreVmsCopy"
      ],
      "copy": {
        "name": "dataStoreExtensionsCopy",
        "count": "[parameters('dataStoreNodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "settings": {
          "fileUris": [
            "[variables('scriptUrlInit')]"
          ],
          "commandToExecute": "[concat('sh init.sh', ' -t datastore', ' -i ', reference(resourceId('Microsoft.Network/networkInterfaces', concat(variables('dataStoreNicName'),copyIndex(1)))).ipConfigurations[0].properties.privateIPAddress, ' -s ', variables('subnetDataStartAddress'), ' -c ', parameters('dataStoreNodeCount'), ' -u ', parameters('artifactsBaseUrl'))]"
        }
      }
    }
  ],
  "outputs": {
    "locator1PublicIP": {
      "type": "string",
      "value": "[concat('http://',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('locator1PublicIPName'))).dnsSettings.fqdn,':4040/')]"
    },
    "locator2PublicIP": {
      "type": "string",
      "value": "[concat('http://',reference(resourceId('Microsoft.Network/publicIPAddresses',variables('locator2PublicIPName'))).dnsSettings.fqdn,':4040/')]"
    }
  }
}
